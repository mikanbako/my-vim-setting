"---------------------------------------------------------------------------
" カラー設定:
"colorscheme desert
colorscheme zellner

"---------------------------------------------------------------------------
" フォント設定:
"
if has('win32')
  " Windows用
  set guifont=M+2VM+IPAG_circle:h12:cSHIFTJIS
  "set guifont=MS_Mincho:h12:cSHIFTJIS
  " 行間隔の設定
  set linespace=1
  " 一部のUCS文字の幅を自動計測して決める
  if has('kaoriya')
    set ambiwidth=auto
  endif
elseif has('mac')
  " set guifont=Osaka－等幅:h14
  set guifont=Menlo\ Regular:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif

set number            " 行番号表示
set clipboard=unnamed " Windows クリップボード対応
set linespace=10 " 行間
set columns=100 " 幅
set guioptions+=a " ビジュアル選択(D&D他)を自動的にクリップボードへ (:help guioptions_a)
set backupdir=$HOME/temp/vim/backup "バックアップディレクトリ
set directory=$HOME/temp/vim/swap " スワップファイルディレクトリ
set undodir=$HOME/temp/vim/undo " UNDOファイルディレクトリ
set list "改行やタブを可視化
set listchars=tab:>\ 
set ruler
set visualbell t_vb=  " ビープ音を消す

" タブ幅の設定
set expandtab " タブをスペースに展開
set tabstop=4 " タブ文字の表示時の見た目の文字数
set shiftwidth=4 " 自動挿入されるインデントの見た目の文字幅
set softtabstop=4 " タブキーを押した場合に挿入される見た目の文字幅

"---------------------------------------------------------------------------
" 日本語入力に関する設定:
"

" 1文字の置換の際に IME の状態を記憶させないための関数
function! DisableIMEWhenReplaceWithOneCharacter()
  set iminsert=0
  return "r"
endfunction

if has('multi_byte_ime') || has('xim')
  " IME ON時のカーソルの色を設定(設定例:紫)
  highlight CursorIM guibg=Purple guifg=NONE
  if has('xim') && has('GUI_GTK')
    " XIMの入力開始キーを設定:
    " 下記の s-space はShift+Spaceの意味でkinput2+canna用設定
    "set imactivatekey=s-space
  endif
  " 挿入モード・検索モードでのデフォルトのIME状態設定
  set iminsert=0 imsearch=0
  " 挿入モードでのIME状態を記憶させない
  if has('mac')
    " 英数キーを追加で押す
    inoremap <silent> <ESC> <ESC><Char-0x66><CR>
  else
    inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
  endif
  " 1文字の置換でのIME状態を記憶させない
  nmap <silent> <expr> r DisableIMEWhenReplaceWithOneCharacter()
endif
"----------------------------------------------------------------------------
" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")
vnoremap <silent> <expr> k ScreenMovement("k")
vnoremap <silent> <expr> 0 ScreenMovement("0")
vnoremap <silent> <expr> ^ ScreenMovement("^")
vnoremap <silent> <expr> $ ScreenMovement("$")

" PageUp、PageDown で動かないようにする（編集中に間違えて押すことがあるため）
map <PageUp> <Nop>
map <PageDown> <Nop>

" F1 でヘルプが起動しないようにする（ESC を押そうとして間違えて押すことがあるため）
map <F1> <Nop>
imap <F1> <Nop>

" ステータスバーの設定
" 文字エンコーディング、改行コードを取得する関数
function! GetEncodingAndFormatStatus()
	let status = ''
	let status = status . "" . &fileformat . ']'

	let file_encoding = ''

	if &fileencoding == ''
		let file_encoding = "Unknown"
	else
		let file_encoding = &fileencoding
	endif

	let status = '[' . file_encoding . ':' . status

	return status
endfunction

set laststatus=2
set statusline=%y%{GetEncodingAndFormatStatus()}%F%m%r%=<%v:%l>\ %p%%

" /Applications/MacVim.app/Contents/Resources/vim/runtime/vimrc_example.vimでの設定を上書きする。
autocmd FileType text setlocal textwidth=0
